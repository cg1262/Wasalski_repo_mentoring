# Azure DevOps Pipeline for Snowflake Git Fetch
# This pipeline fetches the DEVOPS_DATA_PYTHON repository using PIPELINEUSER profile

trigger:
  branches:
    include:
      - main
      - dev
      - feature/*

# Manual trigger option
pr: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: Snowflake_Credentials_PIPELINEUSER  # Variable group containing PIPELINEUSER credentials
  - name: SNOWFLAKE_REPO_NAME
    value: 'DEVOPS_DATA_PYTHON'
  - name: SNOWFLAKE_CONNECTION_NAME
    value: 'PIPELINEUSER'

stages:
  - stage: SnowflakeGitFetch
    displayName: 'Snowflake Git Fetch Stage'
    jobs:
      - job: FetchRepository
        displayName: 'Fetch DEVOPS_DATA_PYTHON Repository'
        steps:
          # Step 1: Install Python and required dependencies
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.9'
              addToPath: true
            displayName: 'Setup Python 3.9'

          # Step 2: Install Snowflake CLI
          - script: |
              echo "Installing Snowflake CLI..."
              pip install --upgrade pip
              pip install snowflake-cli-labs
              snow --version
            displayName: 'Install Snowflake CLI'

          # Step 3: Create Snowflake configuration file with PIPELINEUSER profile
          - script: |
              echo "Creating Snowflake configuration file..."
              mkdir -p ~/.snowflake
              cat <<EOF > ~/.snowflake/config.toml
              default_connection_name = "$(SNOWFLAKE_CONNECTION_NAME)"
              
              [connections]
              [connections.$(SNOWFLAKE_CONNECTION_NAME)]
              account = "$(SNOWFLAKE_ACCOUNT)"
              user = "$(SNOWFLAKE_USER_PIPELINE)"
              role = "$(SNOWFLAKE_ROLE_PIPELINE)"
              warehouse = "$(SNOWFLAKE_WAREHOUSE)"
              database = "$(SNOWFLAKE_DATABASE)"
              schema = "$(SNOWFLAKE_SCHEMA)"
              authenticator = "snowflake"
              password = "$(SNOWFLAKE_PASSWORD_PIPELINE)"
              EOF
              
              echo "Configuration file created successfully"
              echo "Connection name: $(SNOWFLAKE_CONNECTION_NAME)"
            displayName: 'Create Snowflake Configuration'
            env:
              SNOWFLAKE_ACCOUNT: $(snowflake_account)
              SNOWFLAKE_USER_PIPELINE: $(snowflake_user_pipeline)
              SNOWFLAKE_ROLE_PIPELINE: $(snowflake_role_pipeline)
              SNOWFLAKE_WAREHOUSE: $(snowflake_warehouse)
              SNOWFLAKE_DATABASE: $(snowflake_database)
              SNOWFLAKE_SCHEMA: $(snowflake_schema)
              SNOWFLAKE_PASSWORD_PIPELINE: $(snowflake_password_pipeline)

          # Step 4: Test Snowflake connection
          - script: |
              echo "Testing Snowflake connection..."
              snow connection test -c $(SNOWFLAKE_CONNECTION_NAME)
              
              echo "Testing basic SQL query..."
              snow sql -q "SELECT current_version(), current_user(), current_role()" -c $(SNOWFLAKE_CONNECTION_NAME)
            displayName: 'Test Snowflake Connection'

          # Step 5: Execute Git Fetch command
          - script: |
              echo "Starting Git Fetch operation..."
              echo "Repository: $(SNOWFLAKE_REPO_NAME)"
              echo "Connection: $(SNOWFLAKE_CONNECTION_NAME)"
              
              # Execute the git fetch command
              snow git fetch $(SNOWFLAKE_REPO_NAME) -c $(SNOWFLAKE_CONNECTION_NAME)
              
              echo "Git fetch completed successfully!"
            displayName: 'Execute Snowflake Git Fetch'
            continueOnError: false

          # Step 6: Verify the fetch operation (optional)
          - script: |
              echo "Verifying git fetch operation..."
              snow sql -q "SHOW GIT REPOSITORIES" -c $(SNOWFLAKE_CONNECTION_NAME)
              
              echo "Checking repository status..."
              snow sql -q "DESCRIBE GIT REPOSITORY $(SNOWFLAKE_REPO_NAME)" -c $(SNOWFLAKE_CONNECTION_NAME)
            displayName: 'Verify Git Fetch Operation'
            continueOnError: true

          # Step 7: Cleanup (optional)
          - script: |
              echo "Cleaning up configuration files..."
              rm -f ~/.snowflake/config.toml
              echo "Cleanup completed"
            displayName: 'Cleanup'
            condition: always()